python module _fortran

    interface

        subroutine setmaxnb(nb,maxnb)
            integer :: nb
            integer intent(out) :: maxnb
        end subroutine setmaxnb

        subroutine sethillslopecoeff(nb,kd,dcoeff)
            integer :: nb
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb,9),intent(out),depend(nb) :: dcoeff
        end subroutine sethillslopecoeff

        subroutine jacobiancoeff(h,kd,kp,dcoeff,nb)
            double precision dimension(nb),intent(in) :: h
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb),intent(in),depend(nb) :: kp
            double precision dimension(nb,9),intent(out),depend(nb) :: dcoeff
            integer, optional,check(len(h)>=nb),depend(h) :: nb=len(h)
        end subroutine jacobiancoeff

        subroutine fctcoeff(h,kd,dcoeff,nb)
            double precision dimension(nb),intent(in) :: h
            double precision dimension(nb),intent(in),depend(nb) :: kd
            double precision dimension(nb),intent(out),depend(nb) :: dcoeff
            integer, optional,check(len(h)>=nb),depend(h) :: nb=len(h)
        end subroutine fctcoeff

        subroutine scale_volume(ids,vscale,scale,nb,n)
            integer dimension(nb),intent(in) :: ids
            double precision dimension(n),intent(in) :: vscale
            double precision dimension(nb),intent(out),depend(nb) :: scale
            integer, optional,check(len(ids)>=nb),depend(ids) :: nb=len(ids)
            integer, optional,check(len(vscale)>=n),depend(vscale) :: n=len(vscale)
        end subroutine scale_volume

        subroutine distocean(nrcv,sid,flux,rcv,wght,area,depth,dep,nb,nbi)
            integer :: nrcv
            integer dimension(nbi),intent(in) :: sid
            double precision dimension(nb),intent(in) :: flux
            integer dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: wght
            double precision dimension(nb),intent(in),depend(nb) :: area
            double precision dimension(nb),intent(in),depend(nb) :: depth
            double precision dimension(nb),intent(out),depend(nb) :: dep
            integer, optional,check(len(sid)>=nbi),depend(sid) :: nbi=len(sid)
            integer, optional,check(len(flux)>=nb),depend(flux) :: nb=len(flux)
        end subroutine distocean

        subroutine donorslist(nrcv,inids,rcvs,donors,nb)
            integer intent(in) :: nrcv
            integer dimension(nb),intent(in) :: inids
            integer dimension(nb,nrcv),intent(in),depend(nb,nrcv) :: rcvs
            integer dimension(nb,12),intent(out),depend(nb) :: donors
            integer, optional,check(len(inids)>=nb),depend(inids) :: nb=len(inids)
        end subroutine donorslist

        subroutine donorsmax(dat,donors,valmax,nb)
            double precision dimension(nb),intent(in) :: dat
            integer dimension(nb,12),intent(in),depend(nb) :: donors
            double precision dimension(nb),intent(out),depend(nb) :: valmax
            integer, optional,check(len(dat)>=nb),depend(dat) :: nb=len(dat)
        end subroutine donorsmax

        subroutine getbc(pb,elev,pts,nelev,nb)
            integer intent(in) :: pb
            double precision dimension(nb),intent(in) :: elev
            integer dimension(pb),intent(in),depend(pb) :: pts
            double precision dimension(pb),intent(out),depend(pb) :: nelev
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine getbc

        subroutine mfdrcvrs(nrcv,exp,elev,sl,rcv,dist,wgt,nb)
            integer intent(in) :: nrcv
            double precision intent(in) :: exp
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb,8),intent(out),depend(nb) :: rcv
            double precision dimension(nb,8),intent(out),depend(nb) :: dist
            double precision dimension(nb,8),intent(out),depend(nb) :: wgt
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine mfdrcvrs

        subroutine mfdreceivers(nrcv,exp,elev,sl,rcv,dist,wgt,nb)
            integer intent(in) :: nrcv
            double precision intent(in) :: exp
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb,nrcv),intent(out),depend(nb,nrcv) :: rcv
            double precision dimension(nb,nrcv),intent(out),depend(nb) :: dist
            double precision dimension(nb,nrcv),intent(out),depend(nb) :: wgt
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine mfdreceivers

        subroutine strataonesed(n,stratnb,ids,weights,strath,stratz,phis,nstrath,nstratz,nphis,nb)
            integer intent(in) :: n
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: strath
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: stratz
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: phis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            integer, optional,check(shape(ids,0)==nb),depend(ids) :: nb=shape(ids,0)
        end subroutine strataonesed

        subroutine stratathreesed(n,stratnb,ids,weights,strath,stratz,stratf,stratw,phis,phif,phiw,nstrath,nstratz,nstratf,nstratw,nphis,nphif,nphiw,nb)
            integer intent(in) :: n
            integer intent(in) :: stratnb
            integer dimension(nb,3),intent(in) :: ids
            double precision dimension(nb,3),intent(in),depend(nb) :: weights
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: strath
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: stratz
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: stratf
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: stratw
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: phis
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: phif
            double precision dimension(n,stratnb),intent(in),depend(n,stratnb) :: phiw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstrath
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratz
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratf
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nstratw
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphis
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphif
            double precision dimension(nb,stratnb),intent(out),depend(nb,stratnb) :: nphiw
            integer, optional,check(shape(ids,0)==nb),depend(ids) :: nb=shape(ids,0)
        end subroutine stratathreesed

        subroutine label_pits(lvl,fill,label,nb)
            double precision,intent(in) :: lvl
            double precision dimension(nb),intent(in) :: fill
            integer dimension(nb),intent(out),depend(nb) :: label
            integer, optional,check(len(fill)>=nb),depend(fill) :: nb=len(fill)
        end subroutine label_pits

        subroutine edge_tile(lvl,border,elev,ledge,nb)
            double precision,intent(in) :: lvl
            integer dimension(nb,2),intent(in) :: border
            double precision dimension(nb),intent(in),depend(nb) :: elev
            integer dimension(nb),intent(out),depend(nb) :: ledge
            integer, optional,check(shape(border,0)==nb),depend(border) :: nb=shape(border,0)
        end subroutine edge_tile

        subroutine fill_tile(edge,elev,inids,fillz,labels,graphnb,m,nb)
            integer dimension(m,2),intent(in) :: edge
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb),intent(in),depend(nb) :: inids
            double precision dimension(nb),intent(out),depend(nb) :: fillz
            integer dimension(nb),intent(out),depend(nb) :: labels
            integer intent(out) :: graphnb
            integer, optional,check(shape(edge,0)==m),depend(edge) :: m=shape(edge,0)
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine fill_tile

        subroutine graph_nodes(graphnb,newwgraph)
            integer intent(in) :: graphnb
            double precision dimension(graphnb,4),intent(out),depend(graphnb) :: newwgraph
        end subroutine graph_nodes

        subroutine spill_pts(mpirk,pitsnb,elev,pitids,border,spill,lspill,rank,m)
            integer intent(in) :: mpirk
            integer intent(in) :: pitsnb
            double precision dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: pitids
            integer dimension(m),intent(in),depend(m) :: border
            integer dimension(pitsnb),intent(out),depend(pitsnb) :: spill
            integer dimension(m),intent(out),depend(m) :: lspill
            integer dimension(pitsnb),intent(out),depend(pitsnb) :: rank
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
        end subroutine spill_pts

        subroutine sort_ids(df1,df2,id2,m)
            integer dimension(m),intent(in) :: df1
            integer dimension(m),intent(in),depend(m) :: df2
            integer dimension(m),intent(out),depend(m) :: id2
            integer, optional,check(len(df1)>=m),depend(df1) :: m=len(df1)
        end subroutine sort_ids

        subroutine fill_edges(nb,cgraph,maxnghbs,nelev,spillrank,spillnodes,spillid,m)
            integer intent(in) :: nb
            double precision dimension(m,5),intent(in) :: cgraph
            integer intent(in) :: maxnghbs
            integer dimension(nb),intent(out),depend(nb) :: spillrank
            integer dimension(nb),intent(out),depend(nb) :: spillnodes
            integer dimension(nb),intent(out),depend(nb) :: spillid
            double precision dimension(nb),intent(out),depend(nb) :: nelev
            integer, optional,check(shape(cgraph,0)==m),depend(cgraph) :: m=shape(cgraph,0)
        end subroutine fill_edges

        subroutine fill_depressions(lvl,dem,fillp,wsh,ggraph,elev,m,nb)
            double precision,intent(in) :: lvl
            double precision dimension(m),intent(in) :: dem
            double precision dimension(m),intent(in),depend(m) :: fillp
            integer dimension(m),intent(in),depend(m) :: wsh
            double precision dimension(nb),intent(in) :: ggraph
            double precision dimension(m),intent(out),depend(m) :: elev
            integer, optional,check(len(dem)>=m),depend(dem) :: m=len(dem)
            integer, optional,check(len(ggraph)>=nb),depend(ggraph) :: nb=len(ggraph)
        end subroutine fill_depressions

        subroutine combine_edges(elev,labels,ins,outs,newgraph,graphnb,m,n)
            double precision dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: labels
            integer dimension(n),intent(in) :: ins
            integer dimension(m),intent(in),depend(m) :: outs
            double precision dimension(n*8,4),intent(out),depend(m,n) :: newgraph
            integer intent(out) :: graphnb
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
            integer, optional,check(len(ins)>=n),depend(ins) :: n=len(ins)
        end subroutine combine_edges

        subroutine fill_dir(spill,pitids,h,ptdir,m,n)
            integer dimension(m),intent(in) :: spill
            integer dimension(n),intent(in) :: pitids
            double precision dimension(n),intent(in) :: h
            integer dimension(n),intent(out),depend(n) :: ptdir
            integer, optional,check(len(spill)>=m),depend(spill) :: m=len(spill)
            integer, optional,check(len(pitids)>=n),depend(pitids) :: n=len(pitids)
        end subroutine fill_dir

        subroutine fill_rcvs(pitids,h,ptdir,rcvs,n)
            integer dimension(n),intent(in) :: pitids
            double precision dimension(n),intent(in) :: h
            integer dimension(n),intent(in),depend(n) :: ptdir
            integer dimension(n),intent(out),depend(n) :: rcvs
            integer, optional,check(len(pitids)>=n),depend(pitids) :: n=len(pitids)
        end subroutine fill_rcvs

        subroutine nghb_dir(pitids,h,ptdir,nptdir,n)
            integer dimension(n),intent(in) :: pitids
            double precision dimension(n),intent(in) :: h
            integer dimension(n),intent(in),depend(n) :: ptdir
            integer dimension(n),intent(out),depend(n) :: nptdir
            integer, optional,check(len(pitids)>=n),depend(pitids) :: n=len(pitids)
        end subroutine nghb_dir

        subroutine getpitvol(hlvl,elev,pit,id,vol,m,n)
            double precision dimension(n,4),intent(in) :: hlvl
            double precision dimension(m),intent(in) :: elev
            integer dimension(m),intent(in),depend(m) :: pit
            integer dimension(m),intent(in),depend(m) :: id
            double precision dimension(n,4),intent(out),depend(n) :: vol
            integer dimension(m),intent(out),depend(m) :: npit
            integer, optional,check(shape(hlvl,0)==n),depend(hlvl) :: n=shape(hlvl,0)
            integer, optional,check(len(elev)>=m),depend(elev) :: m=len(elev)
        end subroutine getpitvol

        subroutine pits_cons(pitids,pitnb,npitids,m,n)
            integer dimension(m),intent(in) :: pitids
            integer dimension(n),intent(in) :: pitnb
            integer dimension(m),intent(out),depend(m) :: npitids
            integer, optional,check(len(pitids)>=m),depend(pitids) :: m=len(pitids)
            integer, optional,check(len(pitnb)>=n),depend(pitnb) :: n=len(pitnb)
        end subroutine pits_cons

        subroutine definetin(coords,cells_nodes,cells_edges,edges_nodes,area,circumcenter,ngbid,edgemax,n,nb,m)
            double precision dimension(nb,3),intent(in) :: coords
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(n,3),intent(in),depend(n) :: cells_edges
            integer dimension(m,2),intent(in) :: edges_nodes
            double precision dimension(nb),intent(in),depend(nb) :: area
            double precision dimension(3,n),intent(in),depend(n) :: circumcenter
            integer dimension(nb,8),intent(out),depend(nb) :: ngbid
            double precision intent(out) :: edgemax
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(coords,0)==nb),depend(coords) :: nb=shape(coords,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definetin

        subroutine definegtin(nb,cells_nodes,edges_nodes,ngbnb,ngbid,n,m)
            integer intent(in) :: nb
            integer dimension(n,3),intent(in) :: cells_nodes
            integer dimension(m,2),intent(in) :: edges_nodes
            integer dimension(nb),intent(out),depend(nb) :: ngbnb
            integer dimension(nb,12),intent(out),depend(nb) :: ngbid
            integer, optional,check(shape(cells_nodes,0)==n),depend(cells_nodes) :: n=shape(cells_nodes,0)
            integer, optional,check(shape(edges_nodes,0)==m),depend(edges_nodes) :: m=shape(edges_nodes,0)
        end subroutine definegtin

        subroutine gfill(sl,elev,ngbid,hmax,fillz,nb)
            use meshparams
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb,12),intent(in),depend(nb) :: ngbid
            double precision intent(in) :: hmax
            double precision dimension(nb),intent(out) :: fillz
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine gfill

        subroutine filllabel(sl,elev,ngbid,fillz,labels,nb)
            use meshparams
            double precision intent(in) :: sl
            double precision dimension(nb),intent(in) :: elev
            integer dimension(nb,8),intent(in),depend(nb) :: ngbid
            double precision dimension(nb),intent(out) :: fillz
            integer dimension(nb),intent(out) :: labels
            integer, optional,check(len(elev)>=nb),depend(elev) :: nb=len(elev)
        end subroutine filllabel

        subroutine flexure(h,hp,nx,ny,xl,yl,rhos,rhoa,eet,ibc,newh)
            integer intent(in) :: nx,ny,ibc
            double precision dimension(nx,ny),intent(in),depend(nx,ny) :: hp
            double precision dimension(nx,ny),intent(in),depend(nx,ny) :: h
            double precision,intent(in) :: rhos,xl,yl,rhoa,eet
            double precision dimension(nx,ny),intent(out),depend(nx,ny) :: newh
        end subroutine flexure

    end interface

end python module _fortran
